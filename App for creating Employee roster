class Employee:
    num_of_emps = 0

    raise_amount = 1.5

    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.pay = pay
        #self.email =  first + '.' + '@company.com'

        Employee.num_of_emps += 1
    
    @property
    def email(self):
        return '{} {}.@email.com'.format(self.first, self.last)
    @property
    def fullname(self):
        return '{} {}'.format(self.first, self.last)

    @fullname.setter
    def name_adder(self, name):
        first, last = name.split(' ')
        self.first = first
        self.last = last

    @fullname.deleter
    def deleter(self, name):
        print('Delete Name')
        self.first = None
        self.last = Name




    def apply_raise(self):
        self.pay = int(self.pay * self.raise_amount)

    def __repr__(self):
        return"Employee('{}', '{}', '{}')".format(self.firts, self.last, self.pay)


    def __str__(self):
        return "{}-{}".format(self.fullname(), self.email)

    def __add__(self, other):
        return self.pay + self.pay

    def __len__(self):
        return len(self.Employees())


    @classmethod
    def set_raise_amt(cls, amount):
        cls.raise_amt = amount


    @classmethod
    def from_string(cls, emp_str):
        first, last, pay = emp_str.split('-')
        return cls(first, last, pay)

    @staticmethod
    def is_workday(day):
        if day.weekday() == 5 or day.weekday()== 6:
            return False
        return True


class Mechanic(Employee):
    raise_amt =1.10

    def __init__(self, first, last, pay, skills):
        super().__intit__(first, last, pay)
        self.pro_lang = skills


class Manager(Employee):

    def __init__(self, first, last, pay, employees=None):
        super().__init__(first, last, pay)
        if employees is None:
            self.employees = []
        else:
            self.employees = employees

        def add_emp(self, emp):
            if emp not in self.employees:
                self.employees.append(emp)

        def remove_emp(self, emp):
            if emp in self.employees:
                self.employees.remove(emp)


        def print_emps(self):
            for emp in self.employees:
                print('->', emp.fullname())












        
